'''
[  1] 10020107: 
	( 1) 10027103,   0.85	( 2) 10027114,   0.17	( 3) 10027126,   0.43	( 4) 10027142,   0.94	( 5) 10027163,   0.19	( 6) 10027207,   0.32	( 7) 10027217,   0.46	( 8) 10027230,   0.23	( 9) 10027243,   0.42	(10) 10027266,   0.37	(11) 10127101,   0.69	(12) 10127115,   0.92
	(13) 10127127,   0.03	(14) 10127141,   0.73	(15) 10127158,   0.72	(16) 10127204,   0.02	(17) 10127216,   0.58	(18) 10127226,   0.22	(19) 10127237,   0.15	(20) 10127247,   0.71	(21) 10220116,   0.45	(22) 10227106,   0.68	(23) 10227116,   0.67	(24) 10227130,   0.53
	(25) 10227144,   0.83	(26) 10227202,   0.76	(27) 10227216,   0.77	(28) 10227226,   0.49	(29) 10227236,   0.82	(30) 10227254,   0.97	(31) 9727150,   0.36	(32) 9727244,   0.62	(33) 9727272,   0.02	(34) 9827141,   0.85	(35) 9827174,   0.65	(36) 9920113,   0.75
	(37) 9927112,   0.59	(38) 9927124,   0.79	(39) 9927139,   0.57	(40) 9927149,   0.46	(41) 9927201,    0.9	(42) 9927215,   0.52	(43) 9927225,   0.78	(44) 9927241,   0.93	(45) 9927270,   0.72
[  2] 10020110: 
	( 1) 10027105,   0.13	( 2) 10027117,   0.55	( 3) 10027128,   0.15	( 4) 10027144,   0.57	( 5) 10027168,   0.68	( 6) 10027209,   0.64	( 7) 10027219,    0.2	( 8) 10027234,   0.61	( 9) 10027245,   0.62	(10) 10027268,   0.59	(11) 10127103,   0.51	(12) 10127117,   0.96
	(13) 10127130,   0.74	(14) 10127143,   0.16	(15) 10127163,    0.5	(16) 10127207,   0.85	(17) 10127218,   0.94	(18) 10127228,   0.59	(19) 10127239,   0.48	(20) 10127249,   0.15	(21) 10220129,   0.99	(22) 10227108,   0.06	(23) 10227118,   0.85	(24) 10227134,   0.97
	(25) 10227206,    0.2	(26) 10227218,   0.38	(27) 10227228,   0.67	(28) 10227239,   0.91	(29) 9727162,   0.64	(30) 9727246,   0.17	(31) 9820120,   0.26	(32) 9827157,   0.13	(33) 9827252,   0.83	(34) 9927101,   0.11	(35) 9927114,   0.04	(36) 9927126,   0.46
	(37) 9927141,   0.77	(38) 9927161,   0.49	(39) 9927204,   0.27	(40) 9927217,   0.06	(41) 9927245,   0.46	(42) 9927272,   0.16
[  3] 10020115: 
	( 1) 10020110,   0.48	( 2) 10027107,   0.75	( 3) 10027119,    0.6	( 4) 10027130,   0.71	( 5) 10027147,   0.85	( 6) 10027170,   0.91	( 7) 10027211,   0.39	( 8) 10027221,   0.06	( 9) 10027236,   0.02	(10) 10077036,   0.67	(11) 10127106,   0.58	(12) 10127121,   0.86
	(13) 10127132,   0.79	(14) 10127145,   0.92	(15) 10127165,   0.86	(16) 10127209,   0.49	(17) 10127220,   0.69	(18) 10127230,   0.69	(19) 10127241,   0.21	(20) 10127261,   0.46	(21) 10224143,   0.58	(22) 10227110,   0.36	(23) 10227120,   0.76	(24) 10227136,   0.49
	(25) 10227208,   0.06	(26) 10227220,   0.12	(27) 10227230,   0.29	(28) 10227241,   0.69	(29) 9727171,   0.23	(30) 9727251,   0.67	(31) 9827112,   0.14	(32) 9827159,   0.92	(33) 9827262,   0.95	(34) 9927104,   0.39	(35) 9927117,   0.69	(36) 9927143,   0.19
	(37) 9927164,   0.19	(38) 9927208,   0.48	(39) 9927219,   0.21	(40) 9927233,   0.55	(41) 9927251,   0.43
[  4] 10020117: 
	( 1) 10027109,   0.46	( 2) 10027121,   0.61	( 3) 10027132,   0.92	( 4) 10027149,   0.29	( 5) 10027203,   0.82	( 6) 10027213,   0.91	( 7) 10027224,   0.82	( 8) 10027238,   0.42	( 9) 10027261,   0.19	(10) 10120104,   0.66	(11) 10127110,   0.54	(12) 10127123,   0.26
	(13) 10127136,   0.18	(14) 10127147,   0.62	(15) 10127171,   0.72	(16) 10127211,   0.99	(17) 10127222,   0.58	(18) 10127232,    0.9	(19) 10127243,   0.35	(20) 10127263,   0.94	(21) 10227102,   0.08	(22) 10227112,   0.74	(23) 10227123,   0.28	(24) 10227139,    0.3
	(25) 10227150,   0.54	(26) 10227211,   0.64	(27) 10227222,   0.46	(28) 10227232,   0.02	(29) 10227245,   0.07	(30) 9627175,   0.01	(31) 9727214,   0.52	(32) 9727254,   0.35	(33) 9827121,   0.58	(34) 9827163,   0.01	(35) 9827271,   0.27	(36) 9927106,   0.85
	(37) 9927119,   0.94	(38) 9927134,   0.73	(39) 9927145,   0.72	(40) 9927166,   0.92	(41) 9927211,   0.89	(42) 9927221,   0.91	(43) 9927262,    0.9
'''

'''
10020107, 10020110, 10020115, 10020117 are the src IDs of the nodes.
'''

import binascii
import struct

fin = open("pairs415.adj", "r")

fout = open("pairs415.bin", "wb")

sin = fin.read()

fin.close()

s = sin.split("[")

for i in range(1, len(s)):
    # split the s into src ID and the rest
    t = s[i].split(":")
    # get the src ID
    # [  1] 10020107: , ID = 10020107
    src = (t[0].strip().split("]")[1].strip())
    # get the dst ID and the weight
    # '\t( 1) 10027103,   0.85\t'

    # split dsts
    
    dsts = t[1].split("\t")

    for j in range(1, len(dsts)):
        # split the dst and the weight
        # ( 1) 10027103,   0.85
        
        # get the dst ID
        # ( 1) 10027103, ID = 10027103
        dst = dsts[j].split(",")[0].split(")")[1].strip()
        # get the weight
        # ( 1) 10027103,   0.85
        weight = dsts[j].split(",")[1].strip()
        # src must be 12 bytes, dst must be 12 bytes, weight must be 4 bytes(float)
        # pack the src, dst, weight

        fout.write(struct.pack("12s12s4s", src.encode(), dst.encode(), struct.pack("f", float(weight))))





        





fout.close()
